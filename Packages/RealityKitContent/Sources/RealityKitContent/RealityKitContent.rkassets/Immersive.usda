#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["AudioMixGroups", "AnimationLibrary", "Anchoring", "Transform", "van_crash", "car_crash", "van_move2", "car_move2", "car_move", "van_move", "Timeline", "Timeline2", "Red_light", "Green_light", "Walk_now", "Dont_walk_now", "Pause_Van", "Resume_Van", "Reset_Van", "Pause_Car", "Resume_Car", "car_crash_audio", "Reset_Car"]
    float3 xformOp:translate = (-4.246743, -2.2921462, -3.996029)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def RealityKitTimeline "van_crash" (
        references = None
    )
    {
        reorder nameChildren = ["Track2", "Track"]
        bool isActive = 1

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "CarCrash01.usdz"
                bool controlPlayback = 1
                double duration = 1.9758333333333336
                uniform token info:id = "890C8843-61AF-422B-A81D-F68C89BC23E5"
                double startTime = 0
                rel target = </Root/Transform/Van>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitComponent "AudioMixGroups"
    {
        uniform token info:id = "RealityKit.AudioMixGroups"

        def RealityKitAudioMixGroup "MixGroup"
        {
            float gain = 0
            bool mute = 0
            float speed = 1
        }
    }

    def RealityKitComponent "AnimationLibrary"
    {
        token info:id = "RealityKit.AnimationLibrary"
    }

    def RealityKitTimeline "Timeline"
    {
        bool isActive = 0

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 1.9758333333333336
                uniform token info:id = "2F2B955D-57DF-4F81-B915-0E56E34F0364"
                double loopCount = 0
                double startTime = 0.0014289983472574731
                rel timeline = </Root/van_crash>
            }
        }
    }

    def RealityKitTimeline "Timeline2"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 0.034585801499032884
                uniform token info:id = "1FAD5562-F46C-4FBA-9C20-0E3F1D0C42F9"
                double loopCount = 1
                double startTime = 0.03891138781431335
                rel timeline = </Root/car_move>
            }

            def RealityKitAction "Play_Timeline2"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 1.9758333333333336
                uniform token info:id = "6963FCCE-0B6C-4CF9-89CA-5048651F80D4"
                double loopCount = 1
                double startTime = 10
                rel timeline = </Root/van_crash>
            }
        }
    }

    def RealityKitTimeline "car_move"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Add_Force"
            {
                string actionKind = "impulse"
                double duration = 0
                float3 impulse = (-2, 0, 0)
                uniform token info:id = "4422F656-34BB-4A72-BE8E-1BFF6B873AF5"
                double startTime = 0.034585801499032884
                rel target = </Root/Transform/Car>
            }
        }
    }

    def RealityKitComponent "Anchoring" (
        active = false
    )
    {
        uniform token info:id = "RealityKit.Anchoring"

        def RealityKitStruct "descriptor"
        {
            matrix4d transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1, 1, 1, 1) )
        }
    }

    def Xform "Transform" (
        active = true
    )
    {
        reorder nameChildren = ["crosswalk_timer_2", "Car", "road", "Van", "traffic_signal", "crosswalk_timer", "Anchoring"]
        def "Car" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
            references = @car1.usdz@
        )
        {
            reorder nameChildren = ["Materials", "Geom", "Collider", "RigidBody", "RCP_BehaviorsContainer", "OnNotification", "OnCollision", "InputTarget", "OnNotification2", "OnNotification3", "OnNotification4", "OnNotification5", "AudioLibrary", "car_crash_audio", "car_crash_audio"]
            quatf xformOp:orient = (0.7071067, 0, 0.7071068, 0)
            float3 xformOp:scale = (0.8494858, 0.8494858, 0.8494858)
            float3 xformOp:translate = (26.451035, 1.3192973, 1.3001719)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Geom"
            {
                over "Plane" (
                    active = false
                )
                {
                }
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Trigger"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (1.5, 1, 4)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (-0.009114474, 0.659663, 1.3729141)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = [
                    </Root/Transform/Car/OnNotification>,
                    </Root/Transform/Car/OnCollision>,
                    </Root/Transform/Car/OnNotification2>,
                    </Root/Transform/Car/OnNotification3>,
                    </Root/Transform/Car/OnNotification4>,
                    </Root/Transform/Car/OnNotification5>,
                ]
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            over "Materials"
            {
                over "Black_Plastic"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }
            }

            def Preliminary_Behavior "OnNotification"
            {
                rel actions = </Root/Transform/Car/OnNotification/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Car/OnNotification/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Car>
                    string identifier = "collision"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/car_crash>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Car/OnNotification/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnCollision"
            {
                rel actions = </Root/Transform/Car/OnCollision/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Car/OnCollision/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Car>
                    rel colliders = </Root/Transform/Car>
                    token info:id = "Collide"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/car_crash>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Car/OnCollision/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Preliminary_Behavior "OnNotification2"
            {
                rel actions = </Root/Transform/Car/OnNotification2/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Car/OnNotification2/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Car>
                    string identifier = "pause"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Pause_Car>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Car/OnNotification2/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnNotification3"
            {
                rel actions = </Root/Transform/Car/OnNotification3/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Car/OnNotification3/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Car>
                    string identifier = "resume"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Resume_Car>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Car/OnNotification3/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnNotification4"
            {
                rel actions = </Root/Transform/Car/OnNotification4/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Car/OnNotification4/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Car>
                    string identifier = "reset"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Reset_Car>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Car/OnNotification4/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnNotification5"
            {
                rel actions = </Root/Transform/Car/OnNotification5/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Car/OnNotification5/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Car>
                    string identifier = "start"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/car_move2>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Car/OnNotification5/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["CarCrash02.usdz"]
                    rel values = </Root/CarCrash02_1>
                }
            }

            def RealityKitComponent "HierarchicalFade"
            {
                uniform token info:id = "RealityKit.HierarchicalFade"
            }
        }

        def "road" (
            active = true
            references = @capstone.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (3.2, 3.2, 4)
            float3 xformOp:translate = (-14.630221, 1.3046337, 2.319369)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Geom"
            {
                over "Plane_001_Plane_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/Transform/road/Materials/crosswalk_material> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:scale = (0.5, 0.5, 0.5)
                    float3 xformOp:translate = (4.0962687, 0.0013900697, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                over "Plane_002_Plane_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/Transform/road/Materials/crosswalk_material> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:scale = (0.5, 0.5, 0.5)
                    float3 xformOp:translate = (4.0962687, 0.0013900697, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                over "Plane_003_Plane_003" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/Transform/road/Materials/crosswalk_material> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:scale = (0.5, 0.5, 0.5)
                    float3 xformOp:translate = (4.0962687, 0.0013900697, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                over "Plane_005_Plane_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/Transform/road/Materials/crosswalk_material> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:scale = (0.5, 0.5, 0.5)
                    float3 xformOp:translate = (4.0962687, 0.0013900697, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                over "Plane_004_Plane_004" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/Transform/road/Materials/crosswalk_material> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:scale = (0.5, 0.5, 0.5)
                    float3 xformOp:translate = (4.0962687, 0.0013900697, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                over "Plane_Material_001" (
                    customData = {
                        float3 rotationEulerHint = (0, 0, 0)
                    }
                )
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (0.5, 0.5, 0.5)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "Materials"
            {
                reorder nameChildren = ["Material_001", "crosswalk_material"]
                over "Material_001"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)
                }

                def Material "crosswalk_material"
                {
                    token outputs:mtlx:surface.connect = </Root/Transform/road/Materials/crosswalk_material/PreviewSurface.outputs:out>
                    token outputs:realitykit:vertex
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.5, 100.5)

                    def Shader "PreviewSurface"
                    {
                        uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                        color3f inputs:diffuseColor = (0.999996, 1, 1) (
                            colorSpace = "srgb_texture"
                        )
                        float inputs:roughness = 1
                        token outputs:out
                        float2 ui:nodegraph:node:pos = (93.5, 100.5)
                        int ui:nodegraph:node:stackingOrder = 3
                    }
                }
            }
        }

        def "Van" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
            references = @Van_updated.usdz@
        )
        {
            reorder nameChildren = ["Materials", "Geom", "Collider", "RigidBody", "RCP_BehaviorsContainer", "OnNotification", "OnCollision", "InputTarget", "OnNotification2", "OnNotification3", "OnNotification4", "OnNotification5", "AudioLibrary", "van_crash_audio"]
            rel material:binding = </Root/Transform/Van/Materials/Material_001> (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-16.235554, 1.3077717, 3.377949)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Trigger"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (1.5, 1.5, 4)
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                        float3 position = (4.7683716e-7, 0.94554853, 0.0575521)
                    }
                }
            }

            def RealityKitComponent "RigidBody"
            {
                bool gravityEnabled = 0
                uniform token info:id = "RealityKit.RigidBody"

                def RealityKitStruct "massFrame"
                {
                    def RealityKitStruct "m_pose"
                    {
                    }
                }

                def RealityKitStruct "material"
                {
                }
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = [
                    </Root/Transform/Van/OnNotification>,
                    </Root/Transform/Van/OnCollision>,
                    </Root/Transform/Van/OnNotification2>,
                    </Root/Transform/Van/OnNotification3>,
                    </Root/Transform/Van/OnNotification4>,
                    </Root/Transform/Van/OnNotification5>,
                ]
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            over "Materials"
            {
                over "Material_001"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "surfaceShader"
                    {
                        color3f inputs:diffuseColor = (0, 0, 0.50980395) (
                            colorSpace = "srgb_texture"
                        )
                    }
                }

                over "Wheels"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "surfaceShader"
                    {
                        color3f inputs:diffuseColor = (1, 1, 1) (
                            colorSpace = "srgb_texture"
                        )
                    }
                }

                over "tires_"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "surfaceShader"
                    {
                        color3f inputs:diffuseColor = (0, 0, 0) (
                            colorSpace = "srgb_texture"
                        )
                    }
                }

                over "Glasses"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "surfaceShader"
                    {
                        color3f inputs:diffuseColor = (0.24514678, 0.24514678, 0.24514678) (
                            colorSpace = "srgb_texture"
                        )
                    }
                }

                over "_3_Bumpers_exaust"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "surfaceShader"
                    {
                        color3f inputs:diffuseColor = (0, 0, 0) (
                            colorSpace = "srgb_texture"
                        )
                    }
                }

                over "_2_Body_extension"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "surfaceShader"
                    {
                        color3f inputs:diffuseColor = (0.06149821, 0.06149821, 0.06149821) (
                            colorSpace = "srgb_texture"
                        )
                    }
                }
            }

            def Preliminary_Behavior "OnNotification"
            {
                rel actions = </Root/Transform/Van/OnNotification/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Van/OnNotification/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Van>
                    string identifier = "collision"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/van_crash>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Van/OnNotification/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnCollision"
            {
                rel actions = </Root/Transform/Van/OnCollision/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Van/OnCollision/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Van>
                    rel colliders = </Root/Transform/Van>
                    token info:id = "Collide"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/van_crash>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Van/OnCollision/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Preliminary_Behavior "OnNotification2"
            {
                rel actions = </Root/Transform/Van/OnNotification2/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Van/OnNotification2/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Van>
                    string identifier = "pause"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Pause_Van>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Van/OnNotification2/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnNotification3"
            {
                rel actions = </Root/Transform/Van/OnNotification3/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Van/OnNotification3/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Van>
                    string identifier = "resume"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Resume_Van>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Van/OnNotification3/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnNotification4"
            {
                rel actions = </Root/Transform/Van/OnNotification4/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Van/OnNotification4/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Van>
                    string identifier = "reset"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Reset_Van>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Van/OnNotification4/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def Preliminary_Behavior "OnNotification5"
            {
                rel actions = </Root/Transform/Van/OnNotification5/Action>
                uniform bool exclusive
                rel triggers = </Root/Transform/Van/OnNotification5/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Transform/Van>
                    string identifier = "start"
                    token info:id = "Notification"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/van_move2>
                    rel animationLibraryKeyOverrideKey = </Root/Transform/Van/OnNotification5/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["CarCrash01.usdz"]
                    rel values = </Root/CarCrash01_1>
                }
            }

            def RealityKitComponent "HierarchicalFade"
            {
                uniform token info:id = "RealityKit.HierarchicalFade"
            }
        }

        def "traffic_signal" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
            references = @traffic_signal.usdz@
        )
        {
            reorder nameChildren = ["Dont_Walk_sign", "Walk_sign", "Red", "Green", "Materials", "Geom"]
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (0.8, 0.8, 0.8)
            float3 xformOp:translate = (2.8862102, 1.335854, 0.09374452)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Materials"
            {
                over "guidepost3"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }

                over "guidepost1"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }

                over "Atlas_052"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "surfaceShader"
                    {
                        color3f inputs:diffuseColor = (0.21163236, 0.21163236, 0.21163236) (
                            colorSpace = "srgb_texture"
                        )
                    }
                }

                over "guidepost4"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }
            }

            over "Geom"
            {
                over "guidepost1" (
                    active = false
                )
                {
                }

                over "guidepost1_2" (
                    active = false
                )
                {
                }

                over "guidepost2" (
                    active = false
                )
                {
                }

                over "guidepost3" (
                    active = false
                )
                {
                }
            }

            def Sphere "Red" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Transform/traffic_signal/Red/DefaultMaterial>
                double radius = 0.1
                quatf xformOp:orient = (0.7071067, 0, -0.70710677, 0)
                float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                float3 xformOp:translate = (-3.7576876, 4.0900717, 0.040060166)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/Transform/traffic_signal/Red/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 0.10258614, 0) (
                            colorSpace = "srgb_texture"
                        )
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }

                def RealityKitComponent "RCP_BehaviorsContainer"
                {
                    rel behaviors = </Root/Transform/traffic_signal/Red/OnNotification>
                    uniform token info:id = "RCP.BehaviorsContainer"
                }

                def Preliminary_Behavior "OnNotification"
                {
                    rel actions = </Root/Transform/traffic_signal/Red/OnNotification/Action>
                    uniform bool exclusive
                    rel triggers = </Root/Transform/traffic_signal/Red/OnNotification/Trigger>

                    def Preliminary_Trigger "Trigger"
                    {
                        rel affectedObjects = </Root/Transform/traffic_signal/Red>
                        string identifier = "start"
                        token info:id = "Notification"
                    }

                    def Preliminary_Action "Action"
                    {
                        rel affectedObjects = </Root>
                        rel animationLibraryKey = </Root/Red_light>
                        rel animationLibraryKeyOverrideKey = </Root/Transform/traffic_signal/Red/OnNotification/Trigger>
                        token info:id = "PlayTimeline"
                        int loops = 0
                        int performCount = 1
                        token type = "serial"
                    }
                }
            }

            def Sphere "Green" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Transform/traffic_signal/Green/DefaultMaterial>
                double radius = 0.1
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (0.7071067, 0, -0.70710677, 0)
                float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
                float3 xformOp:translate = (-3.7576876, 3.5082843, 0.04005981)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/Transform/traffic_signal/Green/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (0.08643005, 1, 0) (
                            colorSpace = "srgb_texture"
                        )
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }

                def RealityKitComponent "RCP_BehaviorsContainer"
                {
                    rel behaviors = </Root/Transform/traffic_signal/Green/OnNotification>
                    uniform token info:id = "RCP.BehaviorsContainer"
                }

                def Preliminary_Behavior "OnNotification"
                {
                    rel actions = </Root/Transform/traffic_signal/Green/OnNotification/Action>
                    uniform bool exclusive
                    rel triggers = </Root/Transform/traffic_signal/Green/OnNotification/Trigger>

                    def Preliminary_Trigger "Trigger"
                    {
                        rel affectedObjects = </Root/Transform/traffic_signal/Green>
                        string identifier = "start"
                        token info:id = "Notification"
                    }

                    def Preliminary_Action "Action"
                    {
                        rel affectedObjects = </Root>
                        rel animationLibraryKey = </Root/Green_light>
                        rel animationLibraryKeyOverrideKey = </Root/Transform/traffic_signal/Green/OnNotification/Trigger>
                        token info:id = "PlayTimeline"
                        int loops = 0
                        int performCount = 1
                        token type = "serial"
                    }
                }
            }

            def "Walk_sign" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @Walk_sign.usdz@
            )
            {
                reorder nameChildren = ["Dont_Walk_sign", "Geom", "Materials"]
                rel material:binding = None (
                    bindMaterialAs = "weakerThanDescendants"
                )
                quatf xformOp:orient = (0.70710677, 0, -0.70710677, 0)
                float3 xformOp:scale = (0.25, 0.25, 0.25)
                float3 xformOp:translate = (-0.018497946, 3.125415, 0.43122807)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "RCP_BehaviorsContainer"
                {
                    rel behaviors = </Root/Transform/traffic_signal/Walk_sign/OnNotification>
                    uniform token info:id = "RCP.BehaviorsContainer"
                }

                over "Materials"
                {
                    over "defaultMaterial"
                    {
                        token outputs:mtlx:surface
                        token outputs:realitykit:vertex
                    }
                }

                def Preliminary_Behavior "OnNotification"
                {
                    rel actions = </Root/Transform/traffic_signal/Walk_sign/OnNotification/Action>
                    uniform bool exclusive
                    rel triggers = </Root/Transform/traffic_signal/Walk_sign/OnNotification/Trigger>

                    def Preliminary_Trigger "Trigger"
                    {
                        rel affectedObjects = </Root/Transform/traffic_signal/Walk_sign>
                        string identifier = "start"
                        token info:id = "Notification"
                    }

                    def Preliminary_Action "Action"
                    {
                        rel affectedObjects = </Root>
                        rel animationLibraryKey = </Root/Walk_now>
                        rel animationLibraryKeyOverrideKey = </Root/Transform/traffic_signal/Walk_sign/OnNotification/Trigger>
                        token info:id = "PlayTimeline"
                        int loops = 0
                        int performCount = 1
                        token type = "serial"
                    }
                }
            }

            def "Dont_Walk_sign" (
                active = true
                references = @Dont_Walk_sign.usdz@
            )
            {
                quatf xformOp:orient = (0.70710677, 0, -0.70710677, 0)
                float3 xformOp:scale = (0.25, 0.25, 0.25)
                float3 xformOp:translate = (-0.020021917, 3.1250002, 0.13576664)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "RCP_BehaviorsContainer"
                {
                    rel behaviors = </Root/Transform/traffic_signal/Dont_Walk_sign/OnNotification>
                    uniform token info:id = "RCP.BehaviorsContainer"
                }

                def Preliminary_Behavior "OnNotification"
                {
                    rel actions = </Root/Transform/traffic_signal/Dont_Walk_sign/OnNotification/Action>
                    uniform bool exclusive
                    rel triggers = </Root/Transform/traffic_signal/Dont_Walk_sign/OnNotification/Trigger>

                    def Preliminary_Trigger "Trigger"
                    {
                        rel affectedObjects = </Root/Transform/traffic_signal/Dont_Walk_sign>
                        string identifier = "start"
                        token info:id = "Notification"
                    }

                    def Preliminary_Action "Action"
                    {
                        rel affectedObjects = </Root>
                        rel animationLibraryKey = </Root/Dont_walk_now>
                        rel animationLibraryKeyOverrideKey = </Root/Transform/traffic_signal/Dont_Walk_sign/OnNotification/Trigger>
                        token info:id = "PlayTimeline"
                        int loops = 0
                        int performCount = 1
                        token type = "serial"
                    }
                }
            }
        }

        def RealityKitComponent "Anchoring" (
            active = false
        )
        {
            uniform token info:id = "RealityKit.Anchoring"

            def RealityKitStruct "descriptor"
            {
            }
        }

        def "crosswalk_timer" (
            active = true
            references = @crosswalk_timer.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 4.2490377e-8, 0)
            float3 xformOp:scale = (0.5, 0.5, 0.5)
            float3 xformOp:translate = (3.1260123, 2.2857084, -0.03503847)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "AnimationLibrary"
            {
                uniform token info:id = "RealityKit.AnimationLibrary"
            }

            over "Materials"
            {
                over "defaultMaterial"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }
            }

            over "Geom"
            {
                over "Plane"
                {
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }
    }

    def RealityKitTimeline "van_move"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Add_Force"
            {
                string actionKind = "impulse"
                double duration = 0
                float3 impulse = (2, 0, 0)
                uniform token info:id = "310B7E56-38B2-468B-BC89-7BE8FB42BA69"
                double startTime = 0
                rel target = </Root/Transform/Van>
            }
        }
    }

    def RealityKitTimeline "van_move2"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            reorder nameChildren = ["StopAtLight", "StartFromLight"]
            def RealityKitAction "StopAtLight"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 8
                uniform token info:id = "7C866021-9065-41BD-BA32-09CAF87CDCAE"
                float3 position = (0.6091702, 1.3077716, 3.3658829)
                quatf rotation = (0.70710677, 0, 0.7071067, 0)
                float3 scale = (1, 1, 1)
                double startTime = 0
                rel target = </Root/Transform/Van>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "relative"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeOut"
                }
            }

            def RealityKitAction "StartFromLight"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 10
                uniform token info:id = "AFEEF4E3-DBE5-49E6-BA4E-8F9F8DF617A1"
                float3 position = (16.606182, 1.3077716, 3.4143467)
                quatf rotation = (0.70710677, 0, 0.7071067, 0)
                float3 scale = (1, 1, 1)
                double startTime = 13
                rel target = </Root/Transform/Van>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "relative"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeInOut"
                }
            }
        }

        def RealityKitTrack "Track2"
        {
        }
    }

    def RealityKitTimeline "car_crash" (
        references = None
    )
    {
        bool isActive = 1
        float2 ui:nodegraph:node:pos = (317.5, 104.5)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "CarCrash02.usdz"
                bool controlPlayback = 1
                double duration = 2
                uniform token info:id = "F1F8173D-D6DB-4695-B11C-164AD941817B"
                double startTime = 0
                rel target = </Root/Transform/Car>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitTimeline "car_move2"
    {
        def RealityKitTrack "Track2"
        {
            def RealityKitAction "StopAtLight"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 8
                uniform token info:id = "509F328E-78FE-4ABA-B4F8-EDD4EB6BE605"
                float3 position = (5.837161, 1.3192973, 1.2935266)
                quatf rotation = (0.7071067, 0, 0.7071068, 0)
                float3 scale = (0.84948575, 0.84948575, 0.84948575)
                double startTime = 0
                rel target = </Root/Transform/Car>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "relative"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeOut"
                }
            }

            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 10
                uniform token info:id = "E3595920-ACAC-4F9F-B7F9-B207E17E7CFC"
                float3 position = (-17.795921, 1.3192973, 1.2969344)
                quatf rotation = (0.7071067, 0, 0.7071068, 0)
                float3 scale = (0.84948575, 0.84948575, 0.84948575)
                double startTime = 13
                rel target = </Root/Transform/Car>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "relative"
                }

                def RealityKitStruct "timingFunction"
                {
                    token type = "easeInOut"
                }
            }
        }
    }

    def RealityKitTimeline "Red_light"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Enable_Entity"
            {
                string actionKind = "enable"
                double duration = 0
                uniform token info:id = "15B58FA2-78A0-497E-A725-4CB584CDDFC3"
                double startTime = 0
                rel target = </Root/Transform/traffic_signal/Red>
            }

            def RealityKitAction "Disable_Entity"
            {
                string actionKind = "disable"
                uniform token info:id = "9F845470-381A-4695-8077-0AD99F17D8F6"
                double startTime = 12.5
                rel target = </Root/Transform/traffic_signal/Red>
            }
        }
    }

    def RealityKitTimeline "Green_light"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Enable_Entity"
            {
                string actionKind = "enable"
                uniform token info:id = "CBBE5B3A-DFBE-4AA4-BCDA-6DBBAC2BC3D0"
                double startTime = 12.5
                rel target = </Root/Transform/traffic_signal/Green>
            }

            def RealityKitAction "Disable_Entity"
            {
                string actionKind = "disable"
                double duration = 0
                uniform token info:id = "F2F617D4-2B47-4A9E-8536-CA0045895201"
                double startTime = 0
                rel target = </Root/Transform/traffic_signal/Green>
            }
        }
    }

    def RealityKitTimeline "Walk_now"
    {
        reorder nameChildren = ["Track2", "Track"]
        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Enable_Entity"
            {
                string actionKind = "enable"
                uniform token info:id = "E4BAE071-C13D-4F7F-B4A6-102F1844B7A1"
                double startTime = 0
                rel target = </Root/Transform/traffic_signal/Walk_sign>
            }

            def RealityKitAction "Disable_Entity2"
            {
                string actionKind = "disable"
                uniform token info:id = "94EB02FA-9D96-4877-B4D3-B0F8DB761EFF"
                double startTime = 8.5
                rel target = </Root/Transform/traffic_signal/Walk_sign>
            }

            def RealityKitAction "Enable_Entity2"
            {
                string actionKind = "enable"
                uniform token info:id = "E38331BA-3CE2-4E5E-823B-7EFC54A4C334"
                double startTime = 9.4995356055012
                rel target = </Root/Transform/traffic_signal/Walk_sign>
            }

            def RealityKitAction "Disable_Entity3"
            {
                string actionKind = "disable"
                double duration = 0
                uniform token info:id = "46989A1A-3162-4973-86B8-BDFCCB6E33FC"
                double startTime = 10.5
                rel target = </Root/Transform/traffic_signal/Walk_sign>
            }

            def RealityKitAction "Enable_Entity22"
            {
                string actionKind = "enable"
                double duration = 0
                uniform token info:id = "E38331BA-3CE2-4E5E-823B-7EFC54A4C334"
                double startTime = 7.5
                rel target = </Root/Transform/traffic_signal/Walk_sign>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
            }

            def RealityKitAction "Disable_Entity22"
            {
                string actionKind = "disable"
                double duration = 0
                uniform token info:id = "94EB02FA-9D96-4877-B4D3-B0F8DB761EFF"
                double startTime = 6.5
                rel target = </Root/Transform/traffic_signal/Walk_sign>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
            }
        }
    }

    def RealityKitTimeline "Dont_walk_now"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Disable_Entity"
            {
                string actionKind = "disable"
                uniform token info:id = "511758C5-10DA-48B6-822E-775D5E539949"
                double startTime = 0
                rel target = </Root/Transform/traffic_signal/Dont_Walk_sign>
            }

            def RealityKitAction "Enable_Entity"
            {
                string actionKind = "enable"
                uniform token info:id = "6EE4AD9B-F011-451F-978C-6BD3A38C3787"
                double startTime = 10.5
                rel target = </Root/Transform/traffic_signal/Dont_Walk_sign>
            }
        }
    }

    def RealityKitTimeline "Pause_Van"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Disable_Entity"
            {
                string actionKind = "disable"
                uniform token info:id = "D046C373-4552-4557-9D93-AA1308356A2D"
                double startTime = 0
                rel target = </Root/Transform/Van>
            }
        }
    }

    def RealityKitTimeline "Resume_Van"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Enable_Entity"
            {
                string actionKind = "enable"
                uniform token info:id = "26F79B96-F7B0-4427-95CC-60FB1C59BCDE"
                double startTime = 0
                rel target = </Root/Transform/Van>
            }
        }
    }

    def RealityKitTimeline "Reset_Van"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 1
                uniform token info:id = "A7EEB1DE-3C66-4ED4-99F9-3D2E1FEA10F9"
                float3 position = (-16.235554, 1.3077717, 3.377949)
                quatf rotation = (0.70710677, 0, 0.7071067, 0)
                float3 scale = (0.99999994, 0.99999994, 0.99999994)
                double startTime = 0
                rel target = </Root/Transform/Van>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Hide"
            {
                string actionKind = "hide"
                int blendLayer = 300
                double duration = 0.2
                uniform token info:id = "41CEE4A5-87BA-4866-9030-3F330BBBA08D"
                double startTime = 0
                rel target = </Root/Transform/Van>

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Show"
            {
                string actionKind = "show"
                int blendLayer = 300
                double duration = 0.2
                uniform token info:id = "085D9255-9703-44CB-A4D8-809734AC0D6A"
                double startTime = 0.8078059653810411
                rel target = </Root/Transform/Van>

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Pause_Car"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Disable_Entity"
            {
                string actionKind = "disable"
                uniform token info:id = "18136C7C-A018-4BC7-BFFA-F2D89326483B"
                double startTime = 0
                rel target = </Root/Transform/Car>
            }
        }
    }

    def RealityKitTimeline "Resume_Car"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Enable_Entity"
            {
                string actionKind = "enable"
                double duration = 0
                uniform token info:id = "BFC41EDD-0B17-425A-8525-2B2F19A12649"
                double startTime = 0
                rel target = </Root/Transform/Car>
            }
        }
    }

    def "CarCrash01_1" (
        active = true
        references = @CarCrash01.usdz@
    )
    {
    }

    def "CarCrash02_1" (
        active = true
        references = @CarCrash02.usdz@
    )
    {
    }

    def RealityKitTimeline "Reset_Car"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_To"
            {
                string actionKind = "moveTo"
                int blendLayer = 300
                double duration = 1
                uniform token info:id = "FDD72AFE-C7DA-45AF-AC1D-BBB12888F588"
                float3 position = (26.451035, 1.3192973, 1.3001719)
                quatf rotation = (0.7071067, 0, 0.7071068, 0)
                float3 scale = (0.84948575, 0.84948575, 0.84948575)
                double startTime = 0
                rel target = </Root/Transform/Car>

                def RealityKitStruct "transformMode"
                {
                    rel referenceEntity = </Root>
                    token type = "parent"
                }

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Hide"
            {
                string actionKind = "hide"
                int blendLayer = 300
                double duration = 0.2
                uniform token info:id = "41CEE4A5-87BA-4866-9030-3F330BBBA08D"
                double startTime = 0
                rel target = </Root/Transform/Car>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Show"
            {
                string actionKind = "show"
                int blendLayer = 300
                double duration = 0.2
                uniform token info:id = "085D9255-9703-44CB-A4D8-809734AC0D6A"
                double startTime = 0.8078059653810411
                rel target = </Root/Transform/Car>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }
}

