#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    def Material "Material"
    {
        token outputs:mtlx:surface.connect = </Root/Material/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.5, 100.5)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 7

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:out
            float2 ui:nodegraph:node:pos = (61.92578, 89.125)
            int ui:nodegraph:node:stackingOrder = 6
        }
    }

    def Cube "Cube" (
        active = false
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Cube/DefaultMaterial>
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, -0.1, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.14913142, 0) (
                    colorSpace = "srgb_texture"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def "capstone" (
        active = true
        references = @capstone.usdz@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.5, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Geom"
        {
            over "Plane_001_Plane_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Material_1> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                float3 xformOp:scale = (0.5, 0.5, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "Plane_002_Plane_002" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Material_1> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                float3 xformOp:scale = (0.5, 0.5, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "Plane_003_Plane_003" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Material_1> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                float3 xformOp:scale = (0.5, 0.5, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "Plane_005_Plane_005" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Material_1> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                float3 xformOp:scale = (0.5, 0.5, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "Plane_004_Plane_004" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Material_1> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                float3 xformOp:scale = (0.5, 0.5, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "Plane_Material_001" (
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.5, 0.5, 0.5)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        over "Materials"
        {
            over "Material_001"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }
    }

    def Material "Material_1"
    {
        token outputs:mtlx:surface.connect = </Root/Material_1/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.5, 100.5)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor = (0.999996, 1, 1) (
                colorSpace = "srgb_texture"
            )
            float inputs:roughness = 1
            token outputs:out
            float2 ui:nodegraph:node:pos = (93.5, 100.5)
            int ui:nodegraph:node:stackingOrder = 3
        }
    }

    def "car" (
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
        references = @car.usdz@
    )
    {
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.31624043, 2.9093723, -2.2075348)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "Black_Plastic"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "Car_paint_002"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            bool isCCDEnabled = 0
            token motionType = "Dynamic"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }

        def RealityKitComponent "MotionState"
        {
            uniform token info:id = "RealityKit.MotionState"
            float3 m_userSetLinearVelocity = (0, 0, 0)
            uint m_userSetLinearVelocityVersion = 1
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (1.887354, 1.3254519, 4.582695)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-2.3061051, -2.264554, 13.409847)
                }
            }
        }
    }

    def Material "Material_2"
    {
        token outputs:mtlx:surface.connect = </Root/Material_2/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.5, 100.5)

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            token outputs:out
            float2 ui:nodegraph:node:pos = (93.5, 100.5)
        }
    }

    def RealityKitTimeline "Timeline"
    {
        reorder nameChildren = ["Track2", "Track"]
        def RealityKitTrack "Track2"
        {
            reorder nameChildren = ["Add_Force", "Transform_To"]
            def RealityKitAction "Add_Force"
            {
                string actionKind = "impulse"
                double duration = 0
                float3 impulse = (-5, 0, 0)
                uniform token info:id = "34CD0B0E-7C4B-4B42-8CF0-6232BF94052C"
                double startTime = 0
                rel target = </Root/car>
            }
        }

        def RealityKitTrack "Track"
        {
        }
    }

    def RealityKitComponent "AudioMixGroups"
    {
        uniform token info:id = "RealityKit.AudioMixGroups"

        def RealityKitAudioMixGroup "MixGroup"
        {
            float gain = 0
            bool mute = 0
            float speed = 1
        }
    }

    def RealityKitTimeline "Timeline2"
    {
        def RealityKitTrack "Track"
        {
        }
    }
}

